/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_wormhole",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wormholeRelayer",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_chainId",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "chainId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_chainId",
        type: "uint16",
      },
      {
        internalType: "bytes32",
        name: "_targetAddress",
        type: "bytes32",
      },
    ],
    name: "isEqual",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "number",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "sourceAddress",
            type: "bytes32",
          },
          {
            internalType: "uint16",
            name: "sourceChain",
            type: "uint16",
          },
          {
            internalType: "uint256",
            name: "maximumRefund",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "deliveryHash",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
        ],
        internalType: "struct IWormholeReceiver.DeliveryData",
        name: "_deliveryData",
        type: "tuple",
      },
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]",
      },
    ],
    name: "receiveWormholeMessages",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_chainId",
        type: "uint16",
      },
    ],
    name: "registerContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    name: "registeredChainToAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "registeredChains",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wormhole",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wormholeRelayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61010060405234801561001157600080fd5b50604051610dc4380380610dc48339810160408190526100309161006f565b6001600160a01b0392831660a052911660c05261ffff1660e052336080526100bd565b80516001600160a01b038116811461006a57600080fd5b919050565b60008060006060848603121561008457600080fd5b61008d84610053565b925061009b60208501610053565b9150604084015161ffff811681146100b257600080fd5b809150509250925092565b60805160a05160c05160e051610cb961010b60003960006102190152600081816102680152818161038901526105f7015260006101990152600081816101e501526102a10152610cb96000f3fe6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101d35780639a8a059214610207578063bc7414961461023b578063d09de08a1461024e578063da25b72514610256578063f2c9ecd81461028a57600080fd5b806302429ab4146100ac5780630fb2cde6146100ce578063200ab0d314610103578063609b9c89146101365780638381f58a1461017157806384acd1bb14610187575b600080fd5b3480156100b857600080fd5b506100cc6100c73660046107ab565b61029f565b005b3480156100da57600080fd5b506100ee6100e93660046107ec565b61040c565b60405190151581526020015b60405180910390f35b34801561010f57600080fd5b5061012361011e366004610816565b610477565b60405161ffff90911681526020016100fa565b34801561014257600080fd5b5061016361015136600461082f565b60026020526000908152604090205481565b6040519081526020016100fa565b34801561017d57600080fd5b5061016360005481565b34801561019357600080fd5b506101bb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100fa565b3480156101df57600080fd5b506101bb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561021357600080fd5b506101237f000000000000000000000000000000000000000000000000000000000000000081565b6100cc6102493660046109c9565b6104af565b6100cc61052f565b34801561026257600080fd5b506101bb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561029657600080fd5b50600054610163565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146103135760405162461bcd60e51b815260206004820152601460248201527331b0b63632b9103737ba103a34329037bbb732b960611b60448201526064015b60405180910390fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf660108204018054600f9092166002026101000a61ffff8181021990931692841602919091179055604051630af24c7b60e41b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063af24c7b090602401602060405180830381865afa1580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190610a8a565b61ffff90911660009081526002602052604090205550565b6000600160008154811061042257610422610aa3565b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff168361ffff1614801561046e575061ffff831660009081526002602052604090205482145b90505b92915050565b6001818154811061048757600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b815160208084015161ffff16600090815260029091526040902054146105175760405162461bcd60e51b815260206004820152601d60248201527f556e726567697374657265642073656e64696e6720636f6e7472616374000000604482015260640161030a565b60008054908061052683610acf565b91905055505050565b60008054908061053e83610acf565b909155506000905067016345785d8a0000815b6001548110156106dc5760006001828154811061057057610570610aa3565b6000918252602080832060108304015461ffff6002600f90941684026101000a909104168084529181526040808420548151858152928301909152919350909190816105f2565b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816105b75790505b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632181f54486858587878b6000805460405160200161064091815260200190565b6040516020818303038152906040528a60c86040518b63ffffffff1660e01b815260040161067699989796959493929190610b79565b60206040518083038185885af1158015610694573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106b99190610c2c565b506106c48587610c5d565b955050505080806106d490610acf565b915050610551565b5060006106e98334610c70565b1115610790576000336106fc8434610c70565b604051600081818185875af1925050503d8060008114610738576040519150601f19603f3d011682016040523d82523d6000602084013e61073d565b606091505b505090508061078e5760405162461bcd60e51b815260206004820152601f60248201527f6469646e2774207375636365656420726566756e64696e672063616c6c657200604482015260640161030a565b505b5050565b803561ffff811681146107a657600080fd5b919050565b600080604083850312156107be57600080fd5b82356001600160a01b03811681146107d557600080fd5b91506107e360208401610794565b90509250929050565b600080604083850312156107ff57600080fd5b61080883610794565b946020939093013593505050565b60006020828403121561082857600080fd5b5035919050565b60006020828403121561084157600080fd5b61046e82610794565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156108835761088361084a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156108b2576108b261084a565b604052919050565b600082601f8301126108cb57600080fd5b813567ffffffffffffffff8111156108e5576108e561084a565b6108f8601f8201601f1916602001610889565b81815284602083860101111561090d57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261093b57600080fd5b8135602067ffffffffffffffff808311156109585761095861084a565b8260051b610967838201610889565b938452858101830193838101908886111561098157600080fd5b84880192505b858310156109bd5782358481111561099f5760008081fd5b6109ad8a87838c01016108ba565b8352509184019190840190610987565b98975050505050505050565b600080604083850312156109dc57600080fd5b823567ffffffffffffffff808211156109f457600080fd5b9084019060a08287031215610a0857600080fd5b610a10610860565b82358152610a2060208401610794565b60208201526040830135604082015260608301356060820152608083013582811115610a4b57600080fd5b610a57888286016108ba565b60808301525093506020850135915080821115610a7357600080fd5b50610a808582860161092a565b9150509250929050565b600060208284031215610a9c57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610ae157610ae1610ab9565b5060010190565b60008151808452602080850194508084016000805b84811015610b6d578251805160028110610b2557634e487b7160e01b84526021600452602484fd5b89528085015161ffff16858a0152604080820151908a015260608082015167ffffffffffffffff16908a01526080908101519089015260a09097019691830191600101610afd565b50959695505050505050565b600061012061ffff808d16845260208c81860152818c1660408601528a60608601528960808601528860a08601528260c0860152875191508183860152600092505b81831015610bda57878301810151858401610140015291820191610bbb565b5061014091506000828286010152601f19601f82011684019050818482030160e0850152610c0a82820187610ae8565b92505050610c1e61010083018460ff169052565b9a9950505050505050505050565b600060208284031215610c3e57600080fd5b815167ffffffffffffffff81168114610c5657600080fd5b9392505050565b8082018082111561047157610471610ab9565b8181038181111561047157610471610ab956fea264697066735822122064cc7cc121448d420d3be92f25de59cc8439aeb1c0ac3a2e2b40ba6eb476000164736f6c63430008110033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _wormhole: PromiseOrValue<string>,
    _wormholeRelayer: PromiseOrValue<string>,
    _chainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Counter> {
    return super.deploy(
      _wormhole,
      _wormholeRelayer,
      _chainId,
      overrides || {}
    ) as Promise<Counter>;
  }
  override getDeployTransaction(
    _wormhole: PromiseOrValue<string>,
    _wormholeRelayer: PromiseOrValue<string>,
    _chainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _wormhole,
      _wormholeRelayer,
      _chainId,
      overrides || {}
    );
  }
  override attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  override connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
