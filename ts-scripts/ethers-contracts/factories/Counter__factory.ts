/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_wormhole",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wormholeRelayer",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_chainId",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "chainId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_chainId",
        type: "uint16",
      },
      {
        internalType: "bytes32",
        name: "_targetAddress",
        type: "bytes32",
      },
    ],
    name: "literalSend",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "number",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "sourceAddress",
            type: "bytes32",
          },
          {
            internalType: "uint16",
            name: "sourceChain",
            type: "uint16",
          },
          {
            internalType: "uint256",
            name: "maximumRefund",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "deliveryHash",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
        ],
        internalType: "struct IWormholeReceiver.DeliveryData",
        name: "_deliveryData",
        type: "tuple",
      },
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]",
      },
    ],
    name: "receiveWormholeMessages",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_chainId",
        type: "uint16",
      },
    ],
    name: "registerContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    name: "registeredChainToAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "registeredChains",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testSend",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "wormhole",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wormholeRelayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61010060405234801561001157600080fd5b50604051610e79380380610e798339810160408190526100309161006f565b6001600160a01b0392831660a052911660c05261ffff1660e052336080526100bd565b80516001600160a01b038116811461006a57600080fd5b919050565b60008060006060848603121561008457600080fd5b61008d84610053565b925061009b60208501610053565b9150604084015161ffff811681146100b257600080fd5b809150509250925092565b60805160a05160c05160e051610d60610119600039600061021701526000818161026e0152818161038e015281816104b3015281816105e901526107c9015260006101970152600081816101e301526102a70152610d606000f3fe6080604052600436106100c25760003560e01c80638da5cb5b1161007f578063c07aaf0f11610059578063c07aaf0f1461024c578063d09de08a14610254578063da25b7251461025c578063f2c9ecd81461029057600080fd5b80638da5cb5b146101d15780639a8a059214610205578063bc7414961461023957600080fd5b806302429ab4146100c7578063200ab0d3146100e95780635bb8a31314610121578063609b9c89146101345780638381f58a1461016f57806384acd1bb14610185575b600080fd5b3480156100d357600080fd5b506100e76100e236600461087e565b6102a5565b005b3480156100f557600080fd5b506101096101043660046108bf565b610411565b60405161ffff90911681526020015b60405180910390f35b6100e761012f3660046108d8565b610449565b34801561014057600080fd5b5061016161014f366004610902565b60026020526000908152604090205481565b604051908152602001610118565b34801561017b57600080fd5b5061016160005481565b34801561019157600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610118565b3480156101dd57600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b34801561021157600080fd5b506101097f000000000000000000000000000000000000000000000000000000000000000081565b6100e7610247366004610aa3565b61057b565b6100e7610593565b6100e76106d9565b34801561026857600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b34801561029c57600080fd5b50600054610161565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146103185760405162461bcd60e51b815260206004820152601460248201527331b0b63632b9103737ba103a34329037bbb732b960611b604482015260640160405180910390fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf660108204018054600f9092166002026101000a61ffff8181021990931692841602919091179055604051630af24c7b60e41b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063af24c7b090602401602060405180830381865afa1580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f99190610b64565b61ffff90911660009081526002602052604090205550565b6001818154811061042157600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b60008054908061045883610b7d565b909155505060408051600080825260208201909252816104ae565b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816104735790505b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632181f544348585878734600080546040516020016104fc91815260200190565b6040516020818303038152906040528a60c86040518b63ffffffff1660e01b815260040161053299989796959493929190610c7b565b60206040518083038185885af1158015610550573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105759190610cea565b50505050565b60008054908061058a83610b7d565b91905055505050565b60408051600080825260208201909252816105e4565b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816105a95790505b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632181f54434600e73ee4bec5831ea92944275741074d3480ab129cc95600e73ee4bec5831ea92944275741074d3480ab129cc95346000805460405160200161065c91815260200190565b6040516020818303038152906040528a60c86040518b63ffffffff1660e01b815260040161069299989796959493929190610c7b565b60206040518083038185885af11580156106b0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106d59190610cea565b5050565b6000805490806106e883610b7d565b9091555050604080516000808252602082019092528161073e565b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816107035790505b50905060005b6001548110156106d55760006001828154811061076357610763610d14565b6000918252602080832060108304015461ffff6002600f90941684026101000a90910416808452918152604080842054845482518085019190915282518082039094018452808301928390526308607d5160e21b90925292945091926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692632181f54492349261080e9288928892849284928892918f9060c890604401610c7b565b60206040518083038185885af115801561082c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906108519190610cea565b505050808061085f90610b7d565b915050610744565b803561ffff8116811461087957600080fd5b919050565b6000806040838503121561089157600080fd5b82356001600160a01b03811681146108a857600080fd5b91506108b660208401610867565b90509250929050565b6000602082840312156108d157600080fd5b5035919050565b600080604083850312156108eb57600080fd5b6108f483610867565b946020939093013593505050565b60006020828403121561091457600080fd5b61091d82610867565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561095d5761095d610924565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561098c5761098c610924565b604052919050565b600082601f8301126109a557600080fd5b813567ffffffffffffffff8111156109bf576109bf610924565b6109d2601f8201601f1916602001610963565b8181528460208386010111156109e757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112610a1557600080fd5b8135602067ffffffffffffffff80831115610a3257610a32610924565b8260051b610a41838201610963565b9384528581018301938381019088861115610a5b57600080fd5b84880192505b85831015610a9757823584811115610a795760008081fd5b610a878a87838c0101610994565b8352509184019190840190610a61565b98975050505050505050565b60008060408385031215610ab657600080fd5b823567ffffffffffffffff80821115610ace57600080fd5b9084019060a08287031215610ae257600080fd5b610aea61093a565b82358152610afa60208401610867565b60208201526040830135604082015260608301356060820152608083013582811115610b2557600080fd5b610b3188828601610994565b60808301525093506020850135915080821115610b4d57600080fd5b50610b5a85828601610a04565b9150509250929050565b600060208284031215610b7657600080fd5b5051919050565b600060018201610b9d57634e487b7160e01b600052601160045260246000fd5b5060010190565b6000815180845260005b81811015610bca57602081850181015186830182015201610bae565b506000602082860101526020601f19601f83011685010191505092915050565b60008151808452602080850194508084016000805b84811015610c6f578251805160028110610c2757634e487b7160e01b84526021600452602484fd5b89528085015161ffff16858a0152604080820151908a015260608082015167ffffffffffffffff16908a01526080908101519089015260a09097019691830191600101610bff565b50959695505050505050565b600061012061ffff808d1684528b6020850152808b166040850152508860608401528760808401528660a08401528060c0840152610cbb81840187610ba4565b905082810360e0840152610ccf8186610bea565b91505060ff83166101008301529a9950505050505050505050565b600060208284031215610cfc57600080fd5b815167ffffffffffffffff8116811461091d57600080fd5b634e487b7160e01b600052603260045260246000fdfea264697066735822122082f47d9872763cc6756982afcf8ce5dac336b60eddbc4b998800d356c946ea5b64736f6c63430008110033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _wormhole: PromiseOrValue<string>,
    _wormholeRelayer: PromiseOrValue<string>,
    _chainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Counter> {
    return super.deploy(
      _wormhole,
      _wormholeRelayer,
      _chainId,
      overrides || {}
    ) as Promise<Counter>;
  }
  override getDeployTransaction(
    _wormhole: PromiseOrValue<string>,
    _wormholeRelayer: PromiseOrValue<string>,
    _chainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _wormhole,
      _wormholeRelayer,
      _chainId,
      overrides || {}
    );
  }
  override attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  override connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
