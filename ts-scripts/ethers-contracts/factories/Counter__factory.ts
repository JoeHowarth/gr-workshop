/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_wormhole",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wormholeRelayer",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_chainId",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "number",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "sourceAddress",
            type: "bytes32",
          },
          {
            internalType: "uint16",
            name: "sourceChain",
            type: "uint16",
          },
          {
            internalType: "uint256",
            name: "maximumRefund",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "deliveryHash",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
        ],
        internalType: "struct IWormholeReceiver.DeliveryData",
        name: "_deliveryData",
        type: "tuple",
      },
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]",
      },
    ],
    name: "receiveWormholeMessages",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_chainId",
        type: "uint16",
      },
    ],
    name: "registerContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    name: "registeredChainToAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "registeredChains",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61010060405234801561001157600080fd5b506040516109b03803806109b08339810160408190526100309161006f565b6001600160a01b0392831660a052911660c05261ffff1660e052336080526100bd565b80516001600160a01b038116811461006a57600080fd5b919050565b60008060006060848603121561008457600080fd5b61008d84610053565b925061009b60208501610053565b9150604084015161ffff811681146100b257600080fd5b809150509250925092565b60805160a05160c05160e0516108b96100f7600039600050506000818161023a0152610411015260005050600061015201526108b96000f3fe6080604052600436106100705760003560e01c80638381f58a1161004e5780638381f58a1461010a578063bc74149614610120578063d09de08a14610133578063f2c9ecd81461013b57600080fd5b806302429ab414610075578063200ab0d314610097578063609b9c89146100cf575b600080fd5b34801561008157600080fd5b506100956100903660046104c2565b610150565b005b3480156100a357600080fd5b506100b76100b2366004610503565b6102bd565b60405161ffff90911681526020015b60405180910390f35b3480156100db57600080fd5b506100fc6100ea36600461051c565b60026020526000908152604090205481565b6040519081526020016100c6565b34801561011657600080fd5b506100fc60005481565b61009561012e3660046106bd565b6102f5565b610095610375565b34801561014757600080fd5b506000546100fc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146101c45760405162461bcd60e51b815260206004820152601460248201527331b0b63632b9103737ba103a34329037bbb732b960611b60448201526064015b60405180910390fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf660108204018054600f9092166002026101000a61ffff8181021990931692841602919091179055604051630af24c7b60e41b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063af24c7b090602401602060405180830381865afa158015610281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a5919061077e565b61ffff90911660009081526002602052604090205550565b600181815481106102cd57600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b815160208084015161ffff166000908152600290915260409020541461035d5760405162461bcd60e51b815260206004820152601d60248201527f556e726567697374657265642073656e64696e6720636f6e747261637400000060448201526064016101bb565b60008054908061036c83610797565b91905055505050565b60008054908061038483610797565b919050555060005b6001548110156104a8576000600182815481106103ab576103ab6107be565b6000918252602080832060108304015461ffff6002600f90941684026101000a909104168084529181526040808420548454825180850191909152825180820390940184528083019283905263518919a560e01b90925292945091926001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263518919a59261044f9287928792849284923492906044016107d4565b6020604051808303816000875af115801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190610859565b50505080806104a090610797565b91505061038c565b50565b803561ffff811681146104bd57600080fd5b919050565b600080604083850312156104d557600080fd5b82356001600160a01b03811681146104ec57600080fd5b91506104fa602084016104ab565b90509250929050565b60006020828403121561051557600080fd5b5035919050565b60006020828403121561052e57600080fd5b610537826104ab565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156105775761057761053e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156105a6576105a661053e565b604052919050565b600082601f8301126105bf57600080fd5b813567ffffffffffffffff8111156105d9576105d961053e565b6105ec601f8201601f191660200161057d565b81815284602083860101111561060157600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261062f57600080fd5b8135602067ffffffffffffffff8083111561064c5761064c61053e565b8260051b61065b83820161057d565b938452858101830193838101908886111561067557600080fd5b84880192505b858310156106b1578235848111156106935760008081fd5b6106a18a87838c01016105ae565b835250918401919084019061067b565b98975050505050505050565b600080604083850312156106d057600080fd5b823567ffffffffffffffff808211156106e857600080fd5b9084019060a082870312156106fc57600080fd5b610704610554565b82358152610714602084016104ab565b6020820152604083013560408201526060830135606082015260808301358281111561073f57600080fd5b61074b888286016105ae565b6080830152509350602085013591508082111561076757600080fd5b506107748582860161061e565b9150509250929050565b60006020828403121561079057600080fd5b5051919050565b6000600182016107b757634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b600061ffff808a1683526020898185015281891660408501528760608501528660808501528560a085015260e060c0850152845191508160e085015260005b828110156108305785810182015185820161010001528101610813565b5050610100600081838601015280601f19601f8401168501019250505098975050505050505050565b60006020828403121561086b57600080fd5b815167ffffffffffffffff8116811461053757600080fdfea264697066735822122003b9179b0f77205001606bea169647da1ed4f878489d237716ecc65c35c08a1b64736f6c63430008110033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _wormhole: PromiseOrValue<string>,
    _wormholeRelayer: PromiseOrValue<string>,
    _chainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Counter> {
    return super.deploy(
      _wormhole,
      _wormholeRelayer,
      _chainId,
      overrides || {}
    ) as Promise<Counter>;
  }
  override getDeployTransaction(
    _wormhole: PromiseOrValue<string>,
    _wormholeRelayer: PromiseOrValue<string>,
    _chainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _wormhole,
      _wormholeRelayer,
      _chainId,
      overrides || {}
    );
  }
  override attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  override connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
